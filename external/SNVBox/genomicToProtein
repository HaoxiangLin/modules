import sys
import os
from db.DBUtil import DBUtil
from db.DataSet import DataSet
from db.ARFFutil import ARFFwriter
from db.FeatureDb import *
from db.CodonMap import CodonConverter

class Mutation:
    def __init__ (self, uid, chrom, end, strand, ref, alt):
        self.uid = uid
        self.chrom = chrom
        self.end = end
        self.strand = strand
        self.ref = ref
        self.alt = alt

    def __repr__(self):
        return ', '.join([self.uid, self.chrom, self.end, self.strand, self.ref, self.alt])

    def __getMrnaAccType(acc):
        accType = ''
        if acc.startswith('NM_') or acc.startswith('NP_'):
            accType = 'RefSeq'
        elif acc.startswith('CCDS'):
            accType = 'CCDS'
        elif acc.startswith('ENS'):
            accType = 'Ensembl'
        return accType


input_filename = sys.argv[1]
output_filename = sys.argv[2]

os.environ['SNVBOXDIR'] = os.path.dirname(os.path.realpath(__file__))

dbu = DBUtil()
codonMap = CodonConverter(dbu.conn)

wf = open(output_filename, 'w')
f = open(input_filename)
for line in f:
    toks = line.rstrip().replace(' ', '\t').split('\t')
    if len(toks) >= 6:
        variant_uid = toks[0]
        chrom = toks[1]
        end = toks[2]
        strand = toks[3]
        ref = toks[4]
        alt = toks[5]
        #if len(toks) >= 7:
        #   sample = toks[6]
        #else:
        #   sample = 'NA'
        mutation = Mutation(variant_uid, chrom, end, strand, ref, alt)

        # Multiple transcripts are returned.
        (transcripts, best_transcript) = codonMap.convert(mutation)

        if len(transcripts) == 0:
            mapping_str = '\t'.join([variant_uid, '', '', '', '', '', '', '', '', 'None', chrom, end, strand, ref, alt])
        else:
            mapping_str = '\t'.join([variant_uid, best_transcript.acc, best_transcript.codon_strand, best_transcript.codon_change, best_transcript.aa_pos, best_transcript.ref_aa, best_transcript.alt_aa, best_transcript.sequence_ontology])
            all_transcript_aasubst = ''
            for transcript in transcripts:
                if transcript.acc != best_transcript.acc:
                    if transcript.sequence_ontology in ['II', 'ID', 'FI', 'FD', 'CS']:
                        aachange = transcript.aa_pos + '(' + transcript.sequence_ontology + ')'
                    else:
                        aachange = transcript.ref_aa + transcript.aa_pos + transcript.alt_aa
                    all_transcript_aasubst += transcript.acc + ':' + transcript.codon_change + ':' + aachange + ', '
            if all_transcript_aasubst != '':
                all_transcript_aasubst = all_transcript_aasubst[:-2]
            mapping_str += '\t' + '\t'.join([all_transcript_aasubst, str(best_transcript.UID), chrom, end, strand, ref, alt])
        wf.write(mapping_str + '\n')
f.close()
wf.close()
